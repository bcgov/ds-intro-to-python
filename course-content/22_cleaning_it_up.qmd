---
title: Cleaning Data
teaching: 45
exercises: 10
questions:
  - Fill this in!
objectives:
  - know how to clean up missing data
  - know how to change data types
  - know when and how to change values
keypoints:
  - Same verse!
jupyter: python3
---

## What a mess!

Imagine you have finally gotten that dataset that you need to work with. Before you get started in earnest working away with generating insights, it is important that you take a closer look at the "quality" of the data.  You will hear it be said that 80% (or some high percentage) of a data scientist's time is spent cleaning data, that is, putting it in a form that will better suit its downstream uses.  

Surprisingly data cleaning is such a big and complex one topic that it is hard to define.  It is even harder to teach in a relatively short tutorial! 

<center>
    <img src="images/getting-data-with-pandas/no capes.jpg" 
    width=300 style="margin:auto"/>
    <p style="text-align: center">
    </p>
</center>

In this tutorial, however, we will focus on a few cleaning techniques that are likely going to be leveraged over and over again. on a few basic quality items that you are likely to come across over and over in your analysis practice.  

- How to identify and clean up missing data
- When and how to change datatypes
- When and how to modify values in your dataset


## Dealing with Missing Data

We have already taken a look at the dataframe, or at least the head contents, with the code above. Now let's start to take a more systematic look at it from a data cleaning perspective. 

Before we get started with code, let's go and get pandas. 

```{python}
###importing libraries
import pandas as pd # pandas for pre processing
```

Now, let's grab a completely fictional and small dataset of movie ratings. To fetch, run the code below:

```{python}
movie_ratings = pd.read_csv('../data/MovieRatingsShort.csv')
movie_ratings.info()
```

Each row contains a movie rater as well as their ratings for selected movies that they have given ratings for. For interpretative purposes, let's say that each movie is rated on a 5 point scale, with 5 being super awesom and 1 being dismal. 
When 

In pandas, there is a widely used method `isna()`, which will return a boolean object indication if a value is considered missing (or in pandas parlance, "NA").

```{python}
###listing out the missing values
movie_ratings.isna()
```


:::{.callout-tip}
## What about isnull()?

Also used widely is `isnull()`, which essentially is simply the mask of `isna()`. You may run into both, and both will return the same results. There is also a `notnull()` function, which is inverse function of `isnull()`, returning True for values that are not NA. And to round things out, `isna()` also has a companinion inverse function called `notna()`. 
:::

In the case above, we are looking at the whole dataframe object. But to get a better overview of how much missing values there are, then we need to add a `.sum()` function to the line of code. 

```{python}
###listing out the missing values
movie_ratings.isna().sum()
```



```{python}
###listing out the missing values
movie_ratings['Star Wars'].fillna()
```





Missing data - Is there data we expect to be present that is missing?

Option 1: Drop the missing values


dropna(how=any)

dropna(subset=['column1', 'column2'], how=all)


Options 2: Filling the missing values

fillna()




















## Changing Data types



Now let's grad a different dataset, this one is a very short version of the 2014 Mental Health in Tech Survey https://www.kaggle.com/datasets/osmi/mental-health-in-tech-survey.

```{python}
m_health = pd.read_csv('../data/TechMentalHealthShort.csv')
m_health.head()
m_health.info()
```

This abridged version of the dataset contains 71 cases and 13 variables:

- **Timestamp**
- Age
- Gender
- Country
- Self Employed: Are you self-employed?
- Family History: Do you have a family history of mental illness?
- Treatment: Have you sought treatment for a mental health condition?
- Work Interfere: If you have a mental health condition, do you feel that it interferes with your work?
- Remote Work: Do you work remotely (outside of an office) at least 50% of the time?
- Tech Company: Is your employer primarily a tech company/organization?
- Benefits: Does your employer provide mental health benefits?
- Leave: How easy is it for you to take medical leave for a mental health condition?
- Mental Health Consequence: Do you think that discussing a mental health issue with your employer would have negative consequences?


## 

:::{.callout-tip}
## Header grooming

A good practice, both in terms of ensuring a consistent convention for column names and for the ability to write more efficient code, is to ensure that all column header names do not have spaces in them and are all in lower case. To do this with our current dataset, we use the `str.replace()` function on all the header row, identified in pandas via .columns:


```{python}
m_health.columns = m_health.columns.str.replace(' ', '_')
m_health.columns = m_health.columns.str.lower()
m_health.head(10)
```

:::



## Missing data








Out of range data - Do we see values that we would not expect to be valid?
Data types - Are the data of the correct (or at least manageable) datatype? 








## Recoding




Also, you will need to make decisions about 



And you'll want to document what you're doing. 

Much of the work that data scientists actually do is what could be described as cleaning data. The topic of data cleaning can encompass a very broad range of things.  

- Validity






And python and pandas excels at dealing with almost all of it in efficient and future-proofing ways. Here 

Do no harm. In your cleaning practices, it is important not to make arguable interpretative judgements that 


